version: "3" # needed at least
services:

    redis:
        image: redis:alpine
        ports:
            - "6379"
        networks:
            - frontend
        deploy:
            replicas: 2
            update_config:
                parallelism: 2
                delay: 10s
            restart_policy:
                condition: on-failure
    db:
        image: postgres:9.4
        environment:
            POSTGRES_USER: "postgres"
            POSTGRES_PASSWORD: "postgres"
        volumes: 
            - db-data:/var/lib/postgresql/data
        networks:
            - backend
        deploy:
            placement:
                constraints: [node.role == manager] # ensure the service will be deployed on a node which has manager status
    
    vote:
        image: dockersamples/examplevotingapp_vote:before
        ports:
            - 80:80
        networks:
            - frontend
        depends_on:
            - redis
        deploy:
            replicas: 2
            update_config:
                parallelism: 2
            restart_policy:
                condition: on-failure
    
    result:
        image: dockersamples/examplevotingapp_result:before
        ports:
            - 5001:80
        networks:
            - backend
        depends_on:
            - db
        deploy:
            replicas: 1
            update_config:
                parallelism: 2
                delay: 10s
        
    worker:
        image: dockersamples/examplevotingapp_worker
        networks:
            - frontend
            - backend
        deploy:
            mode: replicated
            replicas: 1
            labels: [APP=VOTING]
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints: [node.role == manager]
        
networks:
    backend:
        driver: overlay
    frontend:
        driver: overlay

volumes:
    db-data: